// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String   @unique
  points            Int      @default(0)
  lang              String?
  usertype          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  groups            Groups[]
  posts             Post[]
  gameInterests     GameInterest[]
  comments          Comment[]
  commentReplays    Reply[]
}



model GameInterest {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  gameType       String 
  level          Int
  favoriteSide   String? 
  favoriteShot   String?
  preferTime     String? 
  racket         Json? 
  bestQuality    String? 
  points         Float   @default(0.0)
  levelAssesment Float   @default(0.0)
  sportsManship  Float   @default(0.0) 

  user   Users   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

// name, description, center, groupType, backgroundImage, activity, members, posts, comments, likes, createdAt, updatedAt
model Groups {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  description        String?
  center             String[]
  groupType          String?
  backgroundImage    String?
  activity           String[]
  members            String[]
  posts              Post[]
  admin              Users     @relation(fields: [adminId], references: [id])
  adminId            String    @db.ObjectId
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Post {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  slug      String      @unique
  title     String
  body      String?
  comments  Comment[]
  likes     Int         @default(0)
  author    Users       @relation(fields: [authorId], references: [id])
  authorId  String      @db.ObjectId

  Group     Groups      @relation(fields: [groupId], references: [id])
  groupId   String      @db.ObjectId

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Comment {
  id      String        @id @default(auto()) @map("_id") @db.ObjectId
  post    Post          @relation(fields: [postId], references: [id])
  postId  String        @db.ObjectId
  comment String

  commentReplays  Reply[]

  author  Users         @relation(fields: [authorId], references: [id])
  authorId String       @db.ObjectId
}

// comment reply

model Reply {
  id      String        @id @default(auto()) @map("_id") @db.ObjectId
  comment Comment       @relation(fields: [commentId], references: [id])
  commentId String      @db.ObjectId
  reply   String

  author  Users         @relation(fields: [authorId], references: [id])
  authorId String       @db.ObjectId
}

type Level {
  point Int?
  name  String?
  img   Int?
  im    Int?
  des   String?
}
// activity
model Activity {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  date      String
  time      String
  level     Level
  timeEnd   String?
  timeEndReal String?
  dateStamp  Int?
  selectedTimeEndStamp Int?
  selectedTimeStamp Int?
  locations String?
  public    Boolean     @default(false)
  private   Boolean     @default(false)
  comments  String?
  isSingle  Boolean     @default(false)
  friendly  Boolean     @default(false)
  cordinates String[]
  selectedpayment String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}